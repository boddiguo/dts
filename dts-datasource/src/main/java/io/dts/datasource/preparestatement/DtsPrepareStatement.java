package io.dts.datasource.preparestatement;

import java.io.Reader;
import java.sql.Array;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.Statement;

import io.dts.datasource.connection.DtsConnection;
import io.dts.datasource.connection.ITxcConnection;

/**
 * Created by guoyubo on 2017/9/26.
 */
public class DtsPrepareStatement extends AbstractDtsPrepareStatement {

  private DtsConnection dtsConnection;

  private PreparedStatement statement;

  public DtsPrepareStatement(final DtsConnection dtsConnection, final PreparedStatement statement) {
    this.dtsConnection = dtsConnection;
    this.statement = statement;
  }

  @Override
  public ITxcConnection getTxcConnection() throws SQLException {
    return dtsConnection;
  }

  @Override
  public PreparedStatement getRawStatement() throws SQLException {
    return statement;
  }

  @Override
  public String getTargetSql() {
    return null;
  }

  @Override
  public ResultSet executeQuery() throws SQLException {
    return null;
  }

  @Override
  public int executeUpdate() throws SQLException {
    return 0;
  }

  @Override
  public boolean execute() throws SQLException {
    return false;
  }

  @Override
  public void addBatch() throws SQLException {

  }


  @Override
  public ResultSet executeQuery(final String sql) throws SQLException {
    return null;
  }

  @Override
  public int executeUpdate(final String sql) throws SQLException {
    return 0;
  }

  @Override
  public boolean execute(final String sql) throws SQLException {
    return false;
  }

  @Override
  public void addBatch(final String sql) throws SQLException {

  }

  @Override
  public void clearBatch() throws SQLException {

  }

  @Override
  public int[] executeBatch() throws SQLException {
    return new int[0];
  }

  @Override
  public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
    return 0;
  }

  @Override
  public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
    return 0;
  }

  @Override
  public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
    return 0;
  }

  @Override
  public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
    return false;
  }

  @Override
  public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
    return false;
  }

  @Override
  public boolean execute(final String sql, final String[] columnNames) throws SQLException {
    return false;
  }
}
